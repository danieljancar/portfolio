import { Inject, NgModule } from '@angular/core';
import { NgIcon } from './components/icon/icon.component';
import { NgIconsToken, provideIcons } from './providers/icon.provider';
import * as i0 from "@angular/core";
export class NgIconsModule {
    constructor(icons) {
        if (Object.keys(icons).length === 0) {
            throw new Error('No icons have been provided. Ensure to include some icons by importing them using NgIconsModule.withIcons({ ... }).');
        }
    }
    /**
     * Define the icons that will be included in the application. This allows unused icons to
     * be tree-shaken away to reduce bundle size
     * @param icons The object containing the required icons
     */
    static withIcons(icons) {
        return { ngModule: NgIconsModule, providers: provideIcons(icons) };
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.1", ngImport: i0, type: NgIconsModule, deps: [{ token: NgIconsToken }], target: i0.ɵɵFactoryTarget.NgModule }); }
    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: "14.0.0", version: "17.0.1", ngImport: i0, type: NgIconsModule, imports: [NgIcon], exports: [NgIcon] }); }
    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: "12.0.0", version: "17.0.1", ngImport: i0, type: NgIconsModule }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.1", ngImport: i0, type: NgIconsModule, decorators: [{
            type: NgModule,
            args: [{
                    imports: [NgIcon],
                    exports: [NgIcon],
                }]
        }], ctorParameters: () => [{ type: undefined, decorators: [{
                    type: Inject,
                    args: [NgIconsToken]
                }] }] });
export const NG_ICON_DIRECTIVES = [NgIcon];
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5tb2R1bGUuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi8uLi8uLi9wYWNrYWdlcy9jb3JlL3NyYy9saWIvaWNvbi5tb2R1bGUudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsT0FBTyxFQUFFLE1BQU0sRUFBdUIsUUFBUSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ3RFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxrQ0FBa0MsQ0FBQztBQUMxRCxPQUFPLEVBQUUsWUFBWSxFQUFFLFlBQVksRUFBRSxNQUFNLDJCQUEyQixDQUFDOztBQU12RSxNQUFNLE9BQU8sYUFBYTtJQUN4QixZQUFrQyxLQUE2QjtRQUM3RCxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsTUFBTSxLQUFLLENBQUMsRUFBRTtZQUNuQyxNQUFNLElBQUksS0FBSyxDQUNiLHFIQUFxSCxDQUN0SCxDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQ7Ozs7T0FJRztJQUNILE1BQU0sQ0FBQyxTQUFTLENBQ2QsS0FBNkI7UUFFN0IsT0FBTyxFQUFFLFFBQVEsRUFBRSxhQUFhLEVBQUUsU0FBUyxFQUFFLFlBQVksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDO0lBQ3JFLENBQUM7OEdBbEJVLGFBQWEsa0JBQ0osWUFBWTsrR0FEckIsYUFBYSxZQUhkLE1BQU0sYUFDTixNQUFNOytHQUVMLGFBQWE7OzJGQUFiLGFBQWE7a0JBSnpCLFFBQVE7bUJBQUM7b0JBQ1IsT0FBTyxFQUFFLENBQUMsTUFBTSxDQUFDO29CQUNqQixPQUFPLEVBQUUsQ0FBQyxNQUFNLENBQUM7aUJBQ2xCOzswQkFFYyxNQUFNOzJCQUFDLFlBQVk7O0FBb0JsQyxNQUFNLENBQUMsTUFBTSxrQkFBa0IsR0FBRyxDQUFDLE1BQU0sQ0FBVSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0LCBNb2R1bGVXaXRoUHJvdmlkZXJzLCBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmdJY29uIH0gZnJvbSAnLi9jb21wb25lbnRzL2ljb24vaWNvbi5jb21wb25lbnQnO1xuaW1wb3J0IHsgTmdJY29uc1Rva2VuLCBwcm92aWRlSWNvbnMgfSBmcm9tICcuL3Byb3ZpZGVycy9pY29uLnByb3ZpZGVyJztcblxuQE5nTW9kdWxlKHtcbiAgaW1wb3J0czogW05nSWNvbl0sXG4gIGV4cG9ydHM6IFtOZ0ljb25dLFxufSlcbmV4cG9ydCBjbGFzcyBOZ0ljb25zTW9kdWxlIHtcbiAgY29uc3RydWN0b3IoQEluamVjdChOZ0ljb25zVG9rZW4pIGljb25zOiBSZWNvcmQ8c3RyaW5nLCBzdHJpbmc+KSB7XG4gICAgaWYgKE9iamVjdC5rZXlzKGljb25zKS5sZW5ndGggPT09IDApIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgJ05vIGljb25zIGhhdmUgYmVlbiBwcm92aWRlZC4gRW5zdXJlIHRvIGluY2x1ZGUgc29tZSBpY29ucyBieSBpbXBvcnRpbmcgdGhlbSB1c2luZyBOZ0ljb25zTW9kdWxlLndpdGhJY29ucyh7IC4uLiB9KS4nLFxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRGVmaW5lIHRoZSBpY29ucyB0aGF0IHdpbGwgYmUgaW5jbHVkZWQgaW4gdGhlIGFwcGxpY2F0aW9uLiBUaGlzIGFsbG93cyB1bnVzZWQgaWNvbnMgdG9cbiAgICogYmUgdHJlZS1zaGFrZW4gYXdheSB0byByZWR1Y2UgYnVuZGxlIHNpemVcbiAgICogQHBhcmFtIGljb25zIFRoZSBvYmplY3QgY29udGFpbmluZyB0aGUgcmVxdWlyZWQgaWNvbnNcbiAgICovXG4gIHN0YXRpYyB3aXRoSWNvbnMoXG4gICAgaWNvbnM6IFJlY29yZDxzdHJpbmcsIHN0cmluZz4sXG4gICk6IE1vZHVsZVdpdGhQcm92aWRlcnM8TmdJY29uc01vZHVsZT4ge1xuICAgIHJldHVybiB7IG5nTW9kdWxlOiBOZ0ljb25zTW9kdWxlLCBwcm92aWRlcnM6IHByb3ZpZGVJY29ucyhpY29ucykgfTtcbiAgfVxufVxuXG5leHBvcnQgY29uc3QgTkdfSUNPTl9ESVJFQ1RJVkVTID0gW05nSWNvbl0gYXMgY29uc3Q7XG4iXX0=