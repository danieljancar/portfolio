import { ChangeDetectionStrategy, Component, HostBinding, Input, booleanAttribute, numberAttribute, } from '@angular/core';
import { injectNgGlyphsConfig } from '../../providers/glyph-config.provider';
import { injectNgGlyphs } from '../../providers/glyph.provider';
import { coerceCssPixelValue } from '../../utils/coercion';
import * as i0 from "@angular/core";
export class NgGlyph {
    constructor() {
        /**
         * Access the available glyphsets
         */
        this.glyphsets = injectNgGlyphs();
        /**
         * Access the default configuration
         */
        this.config = injectNgGlyphsConfig();
        /**
         * Define the glyphset to use
         */
        this.glyphset = this.glyphsets.defaultGlyphset;
        /**
         * Define the optical size of the glyph
         */
        this.opticalSize = this.config.opticalSize;
        /**
         * Define the weight of the glyph
         */
        this.weight = this.config.weight;
        /**
         * Define the grade of the glyph
         */
        this.grade = this.config.grade;
        /**
         * Define the fill of the glyph
         */
        this.fill = this.config.fill;
        /**
         * Define the size of the glyph
         */
        this.size = this.config.size;
        /**
         * Define the color of the glyph
         */
        this.color = this.config.color;
    }
    /**
     * Derive the glyphset class from the glyphset name
     */
    get glyphsetClass() {
        const glyphset = this.glyphsets.glyphsets.find(glyphset => glyphset.name === this.glyphset);
        if (!glyphset) {
            throw new Error(`The glyphset "${this.glyphset}" does not exist. Please provide a valid glyphset.`);
        }
        return glyphset.baseClass;
    }
    /**
     * Define the font variation settings of the glyph
     */
    get fontVariationSettings() {
        return `'FILL' ${this.fill ? 1 : 0}, 'wght' ${this.weight}, 'GRAD' ${this.grade}, 'opsz' ${this.opticalSize}`;
    }
    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: "12.0.0", version: "17.0.1", ngImport: i0, type: NgGlyph, deps: [], target: i0.ɵɵFactoryTarget.Component }); }
    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: "16.1.0", version: "17.0.1", type: NgGlyph, isStandalone: true, selector: "ng-glyph", inputs: { name: "name", glyphset: "glyphset", opticalSize: ["opticalSize", "opticalSize", numberAttribute], weight: ["weight", "weight", numberAttribute], grade: ["grade", "grade", numberAttribute], fill: ["fill", "fill", booleanAttribute], size: ["size", "size", coerceCssPixelValue], color: "color" }, host: { properties: { "textContent": "this.name", "style.--ng-glyph__size": "this.size", "style.color": "this.color", "class": "this.glyphsetClass", "style.font-variation-settings": "this.fontVariationSettings" } }, ngImport: i0, template: ``, isInline: true, styles: [":host{display:inline-block;width:var(--ng-glyph__size);height:var(--ng-glyph__size);font-size:var(--ng-glyph__size);overflow:hidden}\n"], changeDetection: i0.ChangeDetectionStrategy.OnPush }); }
}
i0.ɵɵngDeclareClassMetadata({ minVersion: "12.0.0", version: "17.0.1", ngImport: i0, type: NgGlyph, decorators: [{
            type: Component,
            args: [{ selector: 'ng-glyph', standalone: true, template: ``, changeDetection: ChangeDetectionStrategy.OnPush, styles: [":host{display:inline-block;width:var(--ng-glyph__size);height:var(--ng-glyph__size);font-size:var(--ng-glyph__size);overflow:hidden}\n"] }]
        }], propDecorators: { name: [{
                type: HostBinding,
                args: ['textContent']
            }, {
                type: Input,
                args: [{ required: true }]
            }], glyphset: [{
                type: Input
            }], opticalSize: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], weight: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], grade: [{
                type: Input,
                args: [{ transform: numberAttribute }]
            }], fill: [{
                type: Input,
                args: [{ transform: booleanAttribute }]
            }], size: [{
                type: HostBinding,
                args: ['style.--ng-glyph__size']
            }, {
                type: Input,
                args: [{ transform: coerceCssPixelValue }]
            }], color: [{
                type: HostBinding,
                args: ['style.color']
            }, {
                type: Input
            }], glyphsetClass: [{
                type: HostBinding,
                args: ['class']
            }], fontVariationSettings: [{
                type: HostBinding,
                args: ['style.font-variation-settings']
            }] } });
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZ2x5cGguY29tcG9uZW50LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vLi4vLi4vLi4vcGFja2FnZXMvY29yZS9zcmMvbGliL2NvbXBvbmVudHMvZ2x5cGgvZ2x5cGguY29tcG9uZW50LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLE9BQU8sRUFDTCx1QkFBdUIsRUFDdkIsU0FBUyxFQUNULFdBQVcsRUFDWCxLQUFLLEVBQ0wsZ0JBQWdCLEVBQ2hCLGVBQWUsR0FDaEIsTUFBTSxlQUFlLENBQUM7QUFDdkIsT0FBTyxFQUFFLG9CQUFvQixFQUFFLE1BQU0sdUNBQXVDLENBQUM7QUFDN0UsT0FBTyxFQUFFLGNBQWMsRUFBRSxNQUFNLGdDQUFnQyxDQUFDO0FBQ2hFLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLHNCQUFzQixDQUFDOztBQVMzRCxNQUFNLE9BQU8sT0FBTztJQVBwQjtRQVFFOztXQUVHO1FBQ2MsY0FBUyxHQUFHLGNBQWMsRUFBRSxDQUFDO1FBRTlDOztXQUVHO1FBQ2MsV0FBTSxHQUFHLG9CQUFvQixFQUFFLENBQUM7UUFTakQ7O1dBRUc7UUFFSCxhQUFRLEdBQVcsSUFBSSxDQUFDLFNBQVMsQ0FBQyxlQUFlLENBQUM7UUFFbEQ7O1dBRUc7UUFDb0MsZ0JBQVcsR0FDaEQsSUFBSSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUM7UUFFMUI7O1dBRUc7UUFDb0MsV0FBTSxHQUFXLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDO1FBRTNFOztXQUVHO1FBQ29DLFVBQUssR0FBVyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQztRQUV6RTs7V0FFRztRQUNxQyxTQUFJLEdBQVksSUFBSSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUM7UUFFekU7O1dBRUc7UUFHSCxTQUFJLEdBQXFCLElBQUksQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDO1FBRTFDOztXQUVHO1FBR0gsVUFBSyxHQUFZLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDO0tBNkJwQztJQTNCQzs7T0FFRztJQUNILElBQ0ksYUFBYTtRQUNmLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLElBQUksQ0FDNUMsUUFBUSxDQUFDLEVBQUUsQ0FBQyxRQUFRLENBQUMsSUFBSSxLQUFLLElBQUksQ0FBQyxRQUFRLENBQzVDLENBQUM7UUFFRixJQUFJLENBQUMsUUFBUSxFQUFFO1lBQ2IsTUFBTSxJQUFJLEtBQUssQ0FDYixpQkFBaUIsSUFBSSxDQUFDLFFBQVEsb0RBQW9ELENBQ25GLENBQUM7U0FDSDtRQUVELE9BQU8sUUFBUSxDQUFDLFNBQVMsQ0FBQztJQUM1QixDQUFDO0lBRUQ7O09BRUc7SUFDSCxJQUNJLHFCQUFxQjtRQUN2QixPQUFPLFVBQVUsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFlBQVksSUFBSSxDQUFDLE1BQU0sWUFDdkQsSUFBSSxDQUFDLEtBQ1AsWUFBWSxJQUFJLENBQUMsV0FBVyxFQUFFLENBQUM7SUFDakMsQ0FBQzs4R0FyRlUsT0FBTztrR0FBUCxPQUFPLHNJQTJCRSxlQUFlLGdDQU1mLGVBQWUsNkJBS2YsZUFBZSwwQkFLZixnQkFBZ0IsMEJBTWhCLG1CQUFtQixxUUFyRDdCLEVBQUU7OzJGQUlELE9BQU87a0JBUG5CLFNBQVM7K0JBQ0UsVUFBVSxjQUNSLElBQUksWUFDTixFQUFFLG1CQUVLLHVCQUF1QixDQUFDLE1BQU07OEJBa0IvQyxJQUFJO3NCQUZILFdBQVc7dUJBQUMsYUFBYTs7c0JBQ3pCLEtBQUs7dUJBQUMsRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFO2dCQU96QixRQUFRO3NCQURQLEtBQUs7Z0JBTWlDLFdBQVc7c0JBQWpELEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFO2dCQU1FLE1BQU07c0JBQTVDLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFO2dCQUtFLEtBQUs7c0JBQTNDLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZUFBZSxFQUFFO2dCQUtHLElBQUk7c0JBQTNDLEtBQUs7dUJBQUMsRUFBRSxTQUFTLEVBQUUsZ0JBQWdCLEVBQUU7Z0JBT3RDLElBQUk7c0JBRkgsV0FBVzt1QkFBQyx3QkFBd0I7O3NCQUNwQyxLQUFLO3VCQUFDLEVBQUUsU0FBUyxFQUFFLG1CQUFtQixFQUFFO2dCQVF6QyxLQUFLO3NCQUZKLFdBQVc7dUJBQUMsYUFBYTs7c0JBQ3pCLEtBQUs7Z0JBT0YsYUFBYTtzQkFEaEIsV0FBVzt1QkFBQyxPQUFPO2dCQW1CaEIscUJBQXFCO3NCQUR4QixXQUFXO3VCQUFDLCtCQUErQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7XG4gIENoYW5nZURldGVjdGlvblN0cmF0ZWd5LFxuICBDb21wb25lbnQsXG4gIEhvc3RCaW5kaW5nLFxuICBJbnB1dCxcbiAgYm9vbGVhbkF0dHJpYnV0ZSxcbiAgbnVtYmVyQXR0cmlidXRlLFxufSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IGluamVjdE5nR2x5cGhzQ29uZmlnIH0gZnJvbSAnLi4vLi4vcHJvdmlkZXJzL2dseXBoLWNvbmZpZy5wcm92aWRlcic7XG5pbXBvcnQgeyBpbmplY3ROZ0dseXBocyB9IGZyb20gJy4uLy4uL3Byb3ZpZGVycy9nbHlwaC5wcm92aWRlcic7XG5pbXBvcnQgeyBjb2VyY2VDc3NQaXhlbFZhbHVlIH0gZnJvbSAnLi4vLi4vdXRpbHMvY29lcmNpb24nO1xuXG5AQ29tcG9uZW50KHtcbiAgc2VsZWN0b3I6ICduZy1nbHlwaCcsXG4gIHN0YW5kYWxvbmU6IHRydWUsXG4gIHRlbXBsYXRlOiBgYCxcbiAgc3R5bGVVcmw6ICcuL2dseXBoLmNvbXBvbmVudC5zY3NzJyxcbiAgY2hhbmdlRGV0ZWN0aW9uOiBDaGFuZ2VEZXRlY3Rpb25TdHJhdGVneS5PblB1c2gsXG59KVxuZXhwb3J0IGNsYXNzIE5nR2x5cGgge1xuICAvKipcbiAgICogQWNjZXNzIHRoZSBhdmFpbGFibGUgZ2x5cGhzZXRzXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGdseXBoc2V0cyA9IGluamVjdE5nR2x5cGhzKCk7XG5cbiAgLyoqXG4gICAqIEFjY2VzcyB0aGUgZGVmYXVsdCBjb25maWd1cmF0aW9uXG4gICAqL1xuICBwcml2YXRlIHJlYWRvbmx5IGNvbmZpZyA9IGluamVjdE5nR2x5cGhzQ29uZmlnKCk7XG5cbiAgLyoqXG4gICAqIERlZmluZSB0aGUgbmFtZSBvZiB0aGUgZ2x5cGggdG8gZGlzcGxheVxuICAgKi9cbiAgQEhvc3RCaW5kaW5nKCd0ZXh0Q29udGVudCcpXG4gIEBJbnB1dCh7IHJlcXVpcmVkOiB0cnVlIH0pXG4gIG5hbWUhOiBzdHJpbmc7XG5cbiAgLyoqXG4gICAqIERlZmluZSB0aGUgZ2x5cGhzZXQgdG8gdXNlXG4gICAqL1xuICBASW5wdXQoKVxuICBnbHlwaHNldDogc3RyaW5nID0gdGhpcy5nbHlwaHNldHMuZGVmYXVsdEdseXBoc2V0O1xuXG4gIC8qKlxuICAgKiBEZWZpbmUgdGhlIG9wdGljYWwgc2l6ZSBvZiB0aGUgZ2x5cGhcbiAgICovXG4gIEBJbnB1dCh7IHRyYW5zZm9ybTogbnVtYmVyQXR0cmlidXRlIH0pIG9wdGljYWxTaXplOiBudW1iZXIgPVxuICAgIHRoaXMuY29uZmlnLm9wdGljYWxTaXplO1xuXG4gIC8qKlxuICAgKiBEZWZpbmUgdGhlIHdlaWdodCBvZiB0aGUgZ2x5cGhcbiAgICovXG4gIEBJbnB1dCh7IHRyYW5zZm9ybTogbnVtYmVyQXR0cmlidXRlIH0pIHdlaWdodDogbnVtYmVyID0gdGhpcy5jb25maWcud2VpZ2h0O1xuXG4gIC8qKlxuICAgKiBEZWZpbmUgdGhlIGdyYWRlIG9mIHRoZSBnbHlwaFxuICAgKi9cbiAgQElucHV0KHsgdHJhbnNmb3JtOiBudW1iZXJBdHRyaWJ1dGUgfSkgZ3JhZGU6IG51bWJlciA9IHRoaXMuY29uZmlnLmdyYWRlO1xuXG4gIC8qKlxuICAgKiBEZWZpbmUgdGhlIGZpbGwgb2YgdGhlIGdseXBoXG4gICAqL1xuICBASW5wdXQoeyB0cmFuc2Zvcm06IGJvb2xlYW5BdHRyaWJ1dGUgfSkgZmlsbDogYm9vbGVhbiA9IHRoaXMuY29uZmlnLmZpbGw7XG5cbiAgLyoqXG4gICAqIERlZmluZSB0aGUgc2l6ZSBvZiB0aGUgZ2x5cGhcbiAgICovXG4gIEBIb3N0QmluZGluZygnc3R5bGUuLS1uZy1nbHlwaF9fc2l6ZScpXG4gIEBJbnB1dCh7IHRyYW5zZm9ybTogY29lcmNlQ3NzUGl4ZWxWYWx1ZSB9KVxuICBzaXplPzogc3RyaW5nIHwgbnVtYmVyID0gdGhpcy5jb25maWcuc2l6ZTtcblxuICAvKipcbiAgICogRGVmaW5lIHRoZSBjb2xvciBvZiB0aGUgZ2x5cGhcbiAgICovXG4gIEBIb3N0QmluZGluZygnc3R5bGUuY29sb3InKVxuICBASW5wdXQoKVxuICBjb2xvcj86IHN0cmluZyA9IHRoaXMuY29uZmlnLmNvbG9yO1xuXG4gIC8qKlxuICAgKiBEZXJpdmUgdGhlIGdseXBoc2V0IGNsYXNzIGZyb20gdGhlIGdseXBoc2V0IG5hbWVcbiAgICovXG4gIEBIb3N0QmluZGluZygnY2xhc3MnKVxuICBnZXQgZ2x5cGhzZXRDbGFzcygpOiBzdHJpbmcge1xuICAgIGNvbnN0IGdseXBoc2V0ID0gdGhpcy5nbHlwaHNldHMuZ2x5cGhzZXRzLmZpbmQoXG4gICAgICBnbHlwaHNldCA9PiBnbHlwaHNldC5uYW1lID09PSB0aGlzLmdseXBoc2V0LFxuICAgICk7XG5cbiAgICBpZiAoIWdseXBoc2V0KSB7XG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICAgIGBUaGUgZ2x5cGhzZXQgXCIke3RoaXMuZ2x5cGhzZXR9XCIgZG9lcyBub3QgZXhpc3QuIFBsZWFzZSBwcm92aWRlIGEgdmFsaWQgZ2x5cGhzZXQuYCxcbiAgICAgICk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGdseXBoc2V0LmJhc2VDbGFzcztcbiAgfVxuXG4gIC8qKlxuICAgKiBEZWZpbmUgdGhlIGZvbnQgdmFyaWF0aW9uIHNldHRpbmdzIG9mIHRoZSBnbHlwaFxuICAgKi9cbiAgQEhvc3RCaW5kaW5nKCdzdHlsZS5mb250LXZhcmlhdGlvbi1zZXR0aW5ncycpXG4gIGdldCBmb250VmFyaWF0aW9uU2V0dGluZ3MoKTogc3RyaW5nIHtcbiAgICByZXR1cm4gYCdGSUxMJyAke3RoaXMuZmlsbCA/IDEgOiAwfSwgJ3dnaHQnICR7dGhpcy53ZWlnaHR9LCAnR1JBRCcgJHtcbiAgICAgIHRoaXMuZ3JhZGVcbiAgICB9LCAnb3BzeicgJHt0aGlzLm9wdGljYWxTaXplfWA7XG4gIH1cbn1cbiJdfQ==